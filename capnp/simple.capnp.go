// Code generated by capnpc-go. DO NOT EDIT.

package capnp

import (
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type Simple struct{ capnp.Struct }

// Simple_TypeID is the unique identifier for the type Simple.
const Simple_TypeID = 0x8fbe8cbda80d33e3

func NewSimple(s *capnp.Segment) (Simple, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return Simple{st}, err
}

func NewRootSimple(s *capnp.Segment) (Simple, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return Simple{st}, err
}

func ReadRootSimple(msg *capnp.Message) (Simple, error) {
	root, err := msg.RootPtr()
	return Simple{root.Struct()}, err
}

func (s Simple) String() string {
	str, _ := text.Marshal(0x8fbe8cbda80d33e3, s.Struct)
	return str
}

func (s Simple) StrField() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Simple) HasStrField() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Simple) StrFieldBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Simple) SetStrField(v string) error {
	return s.Struct.SetText(0, v)
}

func (s Simple) Bytes1Field() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s Simple) HasBytes1Field() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Simple) SetBytes1Field(v []byte) error {
	return s.Struct.SetData(1, v)
}

func (s Simple) Bytes2Field() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return []byte(p.Data()), err
}

func (s Simple) HasBytes2Field() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s Simple) SetBytes2Field(v []byte) error {
	return s.Struct.SetData(2, v)
}

func (s Simple) Timestamp() int64 {
	return int64(s.Struct.Uint64(0))
}

func (s Simple) SetTimestamp(v int64) {
	s.Struct.SetUint64(0, uint64(v))
}

// Simple_List is a list of Simple.
type Simple_List struct{ capnp.List }

// NewSimple creates a new list of Simple.
func NewSimple_List(s *capnp.Segment, sz int32) (Simple_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3}, sz)
	return Simple_List{l}, err
}

func (s Simple_List) At(i int) Simple { return Simple{s.List.Struct(i)} }

func (s Simple_List) Set(i int, v Simple) error { return s.List.SetStruct(i, v.Struct) }

func (s Simple_List) String() string {
	str, _ := text.MarshalList(0x8fbe8cbda80d33e3, s.List)
	return str
}

// Simple_Promise is a wrapper for a Simple promised by a client call.
type Simple_Promise struct{ *capnp.Pipeline }

func (p Simple_Promise) Struct() (Simple, error) {
	s, err := p.Pipeline.Struct()
	return Simple{s}, err
}

type SimpleArr struct{ capnp.Struct }

// SimpleArr_TypeID is the unique identifier for the type SimpleArr.
const SimpleArr_TypeID = 0x82e9c35a44ad38e6

func NewSimpleArr(s *capnp.Segment) (SimpleArr, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SimpleArr{st}, err
}

func NewRootSimpleArr(s *capnp.Segment) (SimpleArr, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SimpleArr{st}, err
}

func ReadRootSimpleArr(msg *capnp.Message) (SimpleArr, error) {
	root, err := msg.RootPtr()
	return SimpleArr{root.Struct()}, err
}

func (s SimpleArr) String() string {
	str, _ := text.Marshal(0x82e9c35a44ad38e6, s.Struct)
	return str
}

func (s SimpleArr) Simples() (Simple_List, error) {
	p, err := s.Struct.Ptr(0)
	return Simple_List{List: p.List()}, err
}

func (s SimpleArr) HasSimples() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s SimpleArr) SetSimples(v Simple_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewSimples sets the simples field to a newly
// allocated Simple_List, preferring placement in s's segment.
func (s SimpleArr) NewSimples(n int32) (Simple_List, error) {
	l, err := NewSimple_List(s.Struct.Segment(), n)
	if err != nil {
		return Simple_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// SimpleArr_List is a list of SimpleArr.
type SimpleArr_List struct{ capnp.List }

// NewSimpleArr creates a new list of SimpleArr.
func NewSimpleArr_List(s *capnp.Segment, sz int32) (SimpleArr_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return SimpleArr_List{l}, err
}

func (s SimpleArr_List) At(i int) SimpleArr { return SimpleArr{s.List.Struct(i)} }

func (s SimpleArr_List) Set(i int, v SimpleArr) error { return s.List.SetStruct(i, v.Struct) }

func (s SimpleArr_List) String() string {
	str, _ := text.MarshalList(0x82e9c35a44ad38e6, s.List)
	return str
}

// SimpleArr_Promise is a wrapper for a SimpleArr promised by a client call.
type SimpleArr_Promise struct{ *capnp.Pipeline }

func (p SimpleArr_Promise) Struct() (SimpleArr, error) {
	s, err := p.Pipeline.Struct()
	return SimpleArr{s}, err
}

const schema_c8d62cd5c48a4ab3 = "x\xdad\x8e\xbdJ\x03A\x14\x85\xcf\xb9\x935\x16Y" +
	"\xc9@\x1e\xc1R\x04\xb5\x11\x9b\x18\xd1\x80\xa92\xdaY" +
	"\x99\x98\x01\x17ve\xdc]\xd1\x80\"\x88\x95\x08\xbe\x83" +
	"\x95\x8d\x95\x85 h\xa3\x85/\xa0/ (>\xc5\xc8" +
	" \xfe\xa0\xd5\x81\x8fs\xbf{\xea\xbb\xf3\xa2\xa3k\xc0" +
	"\x8cF#\xfeu\xf6rq\xed\xfe\xfd\x08:\xa6\xbf\xea" +
	"\x9c<<M<?\"b\x15\xd0\xad\x1b\xbd\x1cr\xa9" +
	"\x09\xfa\x97\x99\xf8\xe2\xf6\xf4\xee\x0c&\xe6\xef\xa6\x0a\x8d" +
	"\x9ds}\x10r\xf8\x06\xfa\"\xc9\\j'7\xd8s" +
	"[nn5\xc9\x9a.\xb5\xad<\xef\x92\xa6\xa2*@" +
	"\x85\x80\x8e\x17\xc2\x02E3.<\xfc<)8\x06v" +
	"\x15Y\xff\xf9\x06\x06\xf8\xdfYu\xa9\x0d\xc2\xfa\xb7\xb0" +
	"\xd7\x01\xcc\xba\xa2I\x85\x9al0\xc0\xa4\x0f\x98ME" +
	"S\x0a\xb5H\x83\x02\xe8\xed\x00\x9d\xa2\xd9\x17R5\xa8" +
	"\xc2\xf2\x15\xc0\xec)\x9ac\xa1/\xca\xbc\x9d\xd8t\x00" +
	"\x805\x08k\xa0\xef\x0fK[L\xb5\x13Tm:`" +
	"\x0ca\xfcE\xa7\xff\xd22\xc9lQ\xf62\xd01\x82" +
	"0\x02?\x02\x00\x00\xff\xff\xed\x05Z\xdc"

func init() {
	schemas.Register(schema_c8d62cd5c48a4ab3,
		0x82e9c35a44ad38e6,
		0x8fbe8cbda80d33e3)
}
